// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5f\x73\xdb\x36\x12\x7f\x2e\x3f\xc5\x96\x72\xeb\x24\x0d\x48\x3b\xed\x4d\x3a\x4a\x95\x19\xc7\x51\x72\xbe\xb8\xb1\x4f\x4e\xa6\x77\x93\x66\x32\x10\xb1\xa4\x10\x81\x00\x0b\x80\x92\x55\x47\xdf\xfd\x66\x41\xea\x9f\x25\xdb\xc9\xe4\xfa\xd2\x3e\xb8\x36\xb0\xd8\x5d\xfc\x76\xf1\xdb\x5d\xa6\xf3\x6d\x3a\x94\x3a\x1d\x72\x37\x02\x86\x97\x51\xd4\x81\x17\xc6\x82\x47\xe7\xa5\x2e\xba\xa0\x4c\x01\x5c\x0b\x10\xd6\x54\xc0\x95\x02\x6f\x79\x9e\xcb\x0c\xfc\x88\x7b\x98\x9a\x5a\x09\xb0\xa6\xf6\x08\x13\xc9\xc1\x8f\x10\x4a\xee\x3c\x5a\xe8\x9f\x3e\x8b\x3a\x30\xe8\x5f\x9c\xbd\x1d\x1c\xf7\x5f\x0e\xce\xde\x9e\xf7\xe2\x99\xa9\x2d\xb3\xe8\x4c\x6d\x33\x64\x85\x35\x75\x15\x47\x1d\x38\xbb\xf8\xf0\xe2\xdf\xcf\x5f\xf7\x62\x53\xa1\x76\x23\x99\xfb\x64\x6f\xe3\x64\x62\x1c\x17\x38\x49\x32\x65\x6a\x11\x47\x9d\xa8\x03\xb2\xf2\x7c\xa8\xd0\x01\x3b\x81\x93\xd7\xe7\x6f\xdf\x00\x73\xb0\x77\x4f\xc8\x02\x7e\x70\x23\x63\x3d\xc4\x7b\xad\xde\x18\x3e\x81\xe7\x52\x01\x3b\xbc\x0f\xec\x23\x9c\x9e\xbd\x04\xc6\x94\x29\x58\x65\x31\x97\x97\x10\xbf\x7a\xfb\xac\x0f\x24\x0a\xcf\x07\x67\xe7\xdd\xf8\xeb\xf4\x93\x8e\x28\xba\xba\x02\x99\x43\x72\x6c\x74\x2e\x8b\xe4\x02\xb3\xda\x4a\x3f\x3b\xe7\x3e\x1b\x9d\xf3\x6c\xcc\x0b\x74\x30\x9f\x47\xca\x14\x05\x5a\x60\xbe\x05\x8e\x39\xcf\xad\xaf\xab\xc4\x8d\x20\x96\xda\x79\xae\x94\xd4\x05\x58\x14\x40\x90\x67\x42\x43\x16\x74\xd6\x96\x7b\x69\x34\x18\x0d\x7b\xf7\x46\xc6\x79\xcd\x4b\xbc\x1f\x47\x19\xf7\xf0\x34\x9d\x70\x9b\x2a\x39\x4c\x67\x75\x99\x66\x4a\xa2\xf6\x2c\x43\xeb\x93\x0a\x4b\xf8\xe5\x97\xfd\xfe\xd9\x8b\x7d\x72\xf1\x18\xad\x3f\x72\xcf\x66\x1e\xdd\xd2\x57\x5a\x93\xb9\xcc\xb8\x47\x97\xb4\xbe\x0e\xb0\x32\x4e\x7a\x63\x67\x61\x1b\x3e\xc1\x85\xb7\xe4\xd7\x7c\x1e\xf5\xcf\x5e\xdc\x6c\x74\x8c\xb3\xeb\x36\xcf\xad\x9c\x70\x8f\xaf\x70\xf6\x85\x96\x5f\xe1\x6c\xcb\x70\x07\xde\x9c\x3d\x3f\xeb\x82\x40\x85\x1e\x43\x06\xe6\x46\x29\x33\x25\x19\x87\x59\x80\x88\xe7\x94\x92\x94\xbe\x99\xaa\x09\x65\x07\xdc\x22\xd8\x5a\xc3\x54\xfa\x11\x70\x98\x94\x20\x4b\x5e\x60\xf3\xf7\x58\x66\xe3\x10\x87\xc4\x62\x65\x60\xc8\xc7\x28\x40\xea\xe6\x96\x90\xa2\xcf\xe8\x8a\x61\xd3\x25\x22\xbd\x26\xbe\xb8\xea\x3b\x3b\x42\xc5\x1e\x33\x87\x76\x82\x96\xd9\xaa\x74\xef\x23\x0a\x52\x6f\x80\x02\xfe\xc9\x3d\xf4\xb5\x47\x5b\x59\xe9\x10\x4e\xa5\xae\x2f\xe1\x31\x5c\x04\x61\xb8\x37\x38\xff\xd5\xdd\x8f\x86\xdc\x61\x6d\x55\x6f\xe4\x7d\xe5\xba\x69\x9a\x09\x9d\x58\x14\x23\xee\x93\xcc\x94\x69\x66\xb4\x47\xed\x53\x21\x9d\x4f\xc9\x5a\xda\xd8\x4a\x1f\xa7\x8f\x1b\x45\xe9\x1e\xa9\xe0\x36\x1b\xa5\xc6\x45\x45\x55\x8c\x71\xd6\xcb\xa5\xc2\x6e\x9a\x86\x7b\x54\x63\x99\xda\xaa\x64\x45\x55\xa4\x83\xf3\x5f\xd9\xcb\xf3\x97\xec\x55\xff\xbf\xac\xb1\xc2\x2c\x2a\xe4\x0e\x23\xe7\x54\xc6\x29\x81\x7a\xe1\x94\x1d\xb9\x32\xcd\x78\xda\x4a\xd5\x58\x51\x90\x83\x54\x08\x7b\x23\x79\x4b\x0e\xae\x44\xc9\xa1\x5b\x12\x27\x42\x4d\xef\x50\xf4\x66\xe8\xa2\xeb\x90\xe2\xa5\xb7\xdc\x7d\x19\xb2\x0c\xfa\xe1\xd4\x5f\x01\x71\xe3\xcf\xdf\x11\x69\xe3\x90\xfd\x98\x1c\x1e\xee\xc2\xfa\xac\x42\x7d\x41\xac\x0d\xc7\x46\x7b\x2e\x35\x5a\x38\x57\xdc\xe7\xc6\x96\x40\x87\xfe\x9a\x6c\xc6\x94\x74\xff\x1d\xc0\x26\x1e\xfb\xec\x42\x70\x34\x38\x23\x5e\x0b\xd5\x04\xea\x4a\x10\x57\xc2\xbb\xab\xab\x96\x17\xdd\xbf\x8c\xd4\x77\x94\x9d\xf8\x21\xc4\x30\x9f\xbf\xdf\x2a\x1d\xd3\x91\x54\x08\xdf\xc2\xac\x2e\xa1\x35\x09\x6c\x06\xec\x0f\xf8\x32\xfd\x41\xfd\x13\x10\x26\x02\xb8\xf5\x5e\x16\xbd\x9d\xdd\x78\xab\xd6\x85\x50\xe6\xe2\x08\xc0\x29\xc4\x0a\x0e\x23\x61\x34\xde\x01\x98\xc5\xd2\x4c\xbe\xac\x6e\xd2\xa5\x33\x85\x5c\x53\xa1\x88\x6c\x09\xcc\xe6\x70\x6b\x1d\xbd\x2d\xbe\x91\xcc\xe1\x5b\xd0\x88\xc2\x51\xc7\x43\xae\x91\x3b\xcc\xc2\xf7\x4f\x53\x81\x93\x54\xd7\x4a\x3d\xa1\x7a\xa5\x23\x80\x0e\x58\x1c\x1a\xe3\x41\x3a\xa0\xdb\x2d\xca\x92\xb7\xbc\x4a\x60\xca\x79\x81\xda\x83\x30\xe8\xf4\xbe\x0f\x75\xcb\xe8\xf6\x88\x23\x1d\x16\x73\x63\x31\x28\xa2\x98\x11\x70\xb6\x0e\xb5\xcf\xc1\x10\x95\x99\xc2\x54\x2a\x05\x1a\x89\x01\x0b\xf4\x80\x97\x98\xd5\x9e\xaa\x5a\x1e\x6a\xe6\xca\xbc\x2c\x4b\x14\x92\x7b\xd2\x46\xe6\x61\xff\x0e\xa0\xe9\x20\x5d\x6d\x0d\x4c\xf0\x06\x32\x53\x56\xa1\x24\xef\x0a\x6d\xfc\x64\x61\x91\xb1\xf6\x17\x6d\xa6\xfb\xd0\xff\xcf\xc9\x9b\x28\x97\xd1\xd5\x15\x6a\x31\x9f\x47\x2d\x8c\x85\xc5\x6a\x85\xb6\x30\xd9\x18\x6d\x53\x86\x73\xe7\xf9\x70\x09\xa3\x9b\x39\x8f\x65\xe6\x15\x38\x6f\x2a\x68\x04\x59\x08\x6a\x5d\x25\x5e\x96\x68\xef\x94\x22\xce\x91\x19\xde\x24\xb7\xb6\x5f\x8e\x73\x97\x5c\xe6\x0e\x58\x0e\x21\xa4\x42\xba\x71\xca\xff\xac\x2d\xa6\xcb\x26\xb7\xe2\xd6\x1f\x46\x00\x98\x8d\x0c\xec\xdf\x2e\x06\x5b\x77\x04\x52\x0f\x85\xad\xfe\xa8\x8d\xe7\x00\x07\x70\xb0\x0f\x4f\x9f\xae\xae\x4e\x6e\x98\x5a\xfb\xeb\x27\x23\x00\xca\x3a\x63\x31\x33\x1a\xd8\x60\xc7\x7e\xd3\xb2\x91\xa6\x66\x29\x15\x1c\x4b\xa3\x93\x8f\xce\xe8\x55\xbb\x16\x01\xc4\xd4\x2a\x0b\x2b\x27\x68\xe3\x2e\xc4\x1f\x4d\x6d\x35\x57\x22\x7e\x48\x7b\x42\x3a\x22\x32\xa6\xb0\xe0\xd9\x8c\x59\x2c\xa4\xf3\x76\x16\x77\xc1\xdb\x1a\xa3\xa6\x49\xdb\xc4\x92\x5b\xbf\x0d\xe6\x6e\x81\x6b\xb1\xcb\x65\x14\xb5\xc8\x54\xb5\x52\xc4\x4a\x0b\x26\x3a\xa1\xee\xcd\x25\xaf\x8d\x40\x98\xcf\xd7\x1f\x19\x7c\xbf\x33\x8b\xd0\x67\x62\x57\x0e\x2d\xa3\x7a\x3d\x56\x2e\x73\xf2\x30\x55\xb5\x3e\x80\x4f\x9f\x9a\xdb\xdd\x14\xd6\x35\xd1\x6b\x06\x9b\x80\x0a\xcc\x79\xad\xbc\xfb\xac\x80\xd2\xb9\x9b\xc3\x19\x76\x09\x97\xdc\x58\x10\xce\x83\xd4\xe0\xb3\xea\xe1\xcf\x3f\xfd\xf4\x53\x60\xe0\x6f\x2a\x6b\xbc\xe9\xed\x5d\x09\xe7\xbf\xfb\xee\xe1\x83\x79\xf4\x4d\x65\xac\x6f\x16\x3a\x9d\x07\x0f\xe7\xd1\x37\xab\x61\xe7\x28\x0c\x63\x27\x83\xfe\x6f\x47\xa7\xa7\x1f\x8e\x4e\x4f\xcf\x7e\x03\x56\xc1\x5e\x50\x02\xac\xa4\xe8\x78\x04\xc6\x9a\xff\xbf\xee\xff\x46\x8b\x8b\x6d\x26\x48\x35\xec\x85\x9f\xec\x23\x1c\x1d\x1f\xf7\xcf\xdf\x00\x9b\xb6\x94\xbd\xb0\xc3\x1c\x9f\x60\x9b\x7c\x6e\xe6\x1a\x5e\x4e\x17\xbb\x34\x84\x4e\x47\xa8\x61\xc9\x9a\x9a\xa2\xba\x60\x41\x1a\x47\x35\xfa\xa9\xb1\x63\xa8\xbd\x54\xd2\x4b\x74\x50\x98\x50\x30\xbc\x01\xcb\x33\x24\xaa\x17\x92\xf8\x2f\xa1\x59\x2e\x5f\x1e\xb6\x75\x60\x44\x62\x4b\x10\xda\x11\xe1\x8d\xb5\x99\x6a\x62\x2c\xe2\xc1\xc6\x12\x02\x6a\x01\x75\xd5\xd0\x30\x96\x95\x9f\x81\x0b\xe5\xaf\x2d\x91\xef\xde\xad\xd1\x1d\x30\x71\x1f\x7a\x3d\x88\x63\x78\xff\x9e\x30\x5f\x14\xaa\x27\xd0\x5c\x7b\x51\x56\x6f\x4f\xdd\x8b\x86\x55\x57\x95\x73\xa3\xdc\x39\xf4\xf0\xc3\x65\x84\x97\x01\xdb\x8b\xa3\x8b\xb7\x83\x93\xde\xfe\x9a\x96\x5f\x03\x37\xb7\x4a\x9a\x7d\x98\xcf\xf7\xc3\x41\x76\xb9\x78\x36\x54\x3a\x18\xab\xac\x9c\x48\x85\x05\x0a\xe2\xdf\x12\x18\x5b\x00\x4a\x77\x02\x36\x81\xb4\x9b\xd2\xaf\xdd\x3f\x81\x61\x6b\xed\x56\x97\xa1\xad\x09\x51\xad\xc9\x60\x73\x22\x8a\x1a\xba\x67\x19\x67\xde\xd6\xce\x53\x64\xcf\xa5\x86\x71\x3d\xc4\x26\xe8\x8e\x80\xaf\x1d\x82\x32\x19\x57\xc0\x2b\xd9\x76\x9c\x91\x23\xe7\x24\x30\x8b\x10\xbb\xce\x3d\x78\xd0\xac\x77\xe1\x7e\xf2\xa0\xf3\xfb\xe1\xa2\x87\x5c\xab\x3a\x9d\xb8\x79\xcf\xc6\xca\x42\xea\xb4\x29\x56\xe9\xf2\x9b\x02\x6b\x16\x92\x95\xf1\xaf\xb7\x41\xe9\x12\x7e\xfc\xff\xb5\x3a\xa1\xbf\x5e\xa9\x35\xc6\xa7\x41\x4d\xda\xea\x89\xae\xae\x18\x3d\x08\x8d\xb0\x97\x3c\xe3\xd9\xb8\xae\x9e\x29\x33\x7c\x4d\x79\x1c\xc7\x77\x7e\x91\x58\x3e\x49\x62\xa2\x09\xda\xd9\x56\x1b\x15\x75\xc0\x79\xca\xdb\xd0\x67\xd0\x9b\x1a\x06\x2b\xa1\xa3\x1a\xe4\x9b\xcc\x95\x3e\x88\x3c\x96\x15\xf9\xf1\x5c\xda\xde\xe6\x5e\x7b\xae\x1c\x0b\x69\x61\x6f\x4d\xee\x8e\xde\x4f\x98\xa9\x56\x86\x0b\x72\xb3\xd1\x11\x7f\xe6\x13\xec\xfb\x4c\x34\x98\xdc\xf0\x0a\x37\x5e\xd1\xf6\xc3\xf9\x3d\x82\xf0\x78\xb6\xb2\xb0\xbb\xbd\xb4\x4b\x38\x7c\xdf\xaa\xac\x99\x48\x81\x36\xed\xa6\x1f\x04\xf7\x3c\xfd\x60\xea\xa5\xea\x75\x18\xba\xa9\xa9\xe9\x85\xd2\xd6\x1d\x77\x01\x02\xb4\xc1\xa2\xd1\xc4\x86\x6d\xd0\x7b\x74\xf2\x5a\x1e\xcc\xe7\xad\x90\x08\x9f\x01\x43\xbb\xdc\x23\x63\x6d\x48\x12\x31\x6c\x05\x78\xe8\x31\x7b\x0b\xc4\x6f\x8f\x4b\x6b\x7f\x21\x8c\x62\x95\x2c\x8f\x16\xe5\xed\xae\xae\x9e\x84\xc2\x97\x1d\xcd\x2b\x37\x32\xfe\x73\x23\xdb\xb0\x23\x61\xf2\xf5\x91\x25\x2c\xbb\xcb\xdf\x96\x5b\xeb\xb9\xdb\xdd\xfc\xab\x89\x11\x43\xe8\xbf\x39\x7e\x7e\xfc\xe6\xf4\xc3\xd1\xf9\x49\x2f\xfe\x31\xbe\x21\x74\x1b\xce\x06\x19\xd2\x12\x7a\xa3\xf6\xda\x0b\xb8\x36\xf2\x61\x2b\x3a\x94\x3d\x8c\x1e\xcf\xe6\xbb\xd2\x38\x6d\x05\x42\xf5\x5a\xef\xdb\x9b\x65\xa9\xa5\x97\x5c\xb1\xf6\x63\x19\xc4\x6d\x28\x0e\xc2\x7f\xcb\xf1\x7d\x63\xb5\xfb\xe8\xc7\x9f\x0f\x1e\xae\x2f\x1d\xee\x14\x3c\xdc\x16\x7c\xb4\x53\xf0\x51\x10\x8c\x77\xbb\xc4\xbc\x19\xa3\x0e\xb0\xb0\xdc\x58\x16\xda\xae\x6b\xa2\x5c\x4c\xd0\x7a\xe9\x90\x55\x88\x96\xd5\x56\x39\xd8\x41\x93\xc1\x4c\x14\x95\x93\x6d\x94\xd2\x07\xd7\xd6\xb6\xa6\xc2\x25\x9e\x1b\xf4\xb4\xd1\xaa\x5d\xd3\xfb\x39\x09\x8e\xa1\x6f\x88\x03\x55\x53\x23\x42\x83\x90\xaf\x35\x0a\xc6\x45\x09\x95\x35\x39\xa5\xfc\xaa\xb0\x65\x46\x7b\x6b\x14\xab\x14\xa7\x76\xa3\x43\x0d\x0c\x57\xce\x84\xf1\x73\x25\x97\x84\x1a\x9b\x4c\x8c\xaa\x4b\x74\x40\x89\x91\x59\xe4\x34\x05\xb6\x1d\x11\x35\xa7\xcd\xa4\x91\x51\x1f\x44\xcd\x52\x4b\xbf\xac\x84\x83\xc7\xff\x38\xa0\x5e\x70\x79\x9d\x96\xb4\x6e\xd0\x4f\x7e\x68\xe3\xb1\x0b\xdc\x9b\x52\x66\x6c\xe5\x6f\x68\xb2\x32\xcb\xdd\x08\x94\x31\x95\x83\x5a\x7b\xa9\x16\xff\x72\x20\x1d\xd4\x55\xb4\x9a\x07\x9a\x2f\x25\xbb\xb5\x2c\x07\x88\xeb\xe3\xc3\xad\xd2\x34\x11\x74\xa0\x99\x5c\x42\x2d\x73\x33\xa7\x4c\x01\x4e\xea\x2c\x74\x7f\x25\xd7\xbc\x40\xa0\x69\x79\xe6\x47\x24\xe2\x47\xd6\xd4\xc5\x08\x16\xc3\xcf\x9a\xc1\x76\x02\x5a\x68\xd9\xe9\x92\xa9\xb6\xb6\xff\x17\x00\x00\xff\xff\x54\x9e\x74\xa4\x7a\x19\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdf\x6f\x1c\xb7\x11\x7e\xe7\x5f\x31\x3e\x05\xb9\x18\x0d\x77\x6d\x14\x85\x00\x39\x32\xe0\xba\x4a\xea\xba\xa9\x04\x29\x45\x5b\x18\x7e\xe0\x91\xb3\xbb\xcc\x71\xc9\xf5\x70\xf6\x4e\x1b\xf5\xfe\xf7\x60\x76\xef\xa4\x8b\x7e\x9c\xe1\x87\xbc\xe4\xed\x24\x0e\xe7\xf7\xf7\x7d\xdc\xa3\x67\xe5\xc2\xc7\x72\x61\x72\x03\x1a\xaf\x95\xba\xb9\x01\x5f\x41\xf1\x36\xc5\xca\xd7\xc5\x15\xda\x9e\x3c\x0f\x17\x86\x6d\x73\x61\xec\xd2\xd4\x98\x61\xb3\x51\x21\xd5\x35\x12\x68\x86\x98\x1c\xea\xcc\x86\xb8\xef\x8a\xdc\xc0\xcc\xc7\xcc\x26\x04\x1f\x6b\x20\x74\xd0\x18\x06\xeb\x22\xd8\xd1\x63\x4f\x86\x7d\x8a\x90\x22\x7c\xf5\x4d\x93\x32\x47\xd3\xe2\xf3\x99\xb2\x86\xe1\x75\xb9\x32\x54\x06\xbf\x28\x87\xbe\x2d\x6d\xf0\x18\x59\x5b\x24\x2e\x3a\x6c\xe1\xbb\xef\xe6\x67\xe7\xdf\xcf\x25\xc1\xb7\x48\xfc\x26\xff\x75\x60\xcc\xb7\x99\xca\xff\x7c\xe5\xad\x61\xcc\xc5\x36\xd3\x4b\xec\x52\xf6\x9c\x68\x18\x8f\xe1\xff\x70\xc5\x24\x79\x6d\x36\xea\xec\xfc\xfb\xa7\x83\x2e\x71\xb8\x1f\xf3\x82\xfc\xca\x30\xbe\xc7\xe1\x0b\x23\xbf\xc7\xe1\x41\xe0\x23\xf8\xe9\xfc\x6f\xe7\x27\xe0\x30\x20\x23\x70\x83\x50\xa5\x10\xd2\x5a\x6c\x32\xda\xb1\x45\xa6\x62\x24\x30\x21\x80\x0d\x7d\x66\xa4\x0c\x86\x10\xa8\x8f\xb0\xf6\xdc\x80\x81\x55\x0b\xbe\x35\x35\x4e\x7f\x2f\xbd\x5d\x8e\x73\x28\x08\xbb\x04\x0b\xb3\x44\x07\x3e\x4e\x55\x42\x89\x6c\xa5\xc4\xf1\x30\x17\xae\xbc\x67\xbe\x2b\xf5\x03\x35\x18\xf4\xb1\xce\x48\x2b\x24\x4d\x5d\x9b\x3f\x2a\x19\xd2\xe9\x25\x3a\xf8\xbb\x61\x38\x8b\x8c\xd4\x91\xcf\x08\xff\xf4\xb1\xbf\x86\x63\xb8\x1a\x8d\xe1\x9b\xcb\x8b\x1f\xf3\x73\xb5\x30\x19\x7b\x0a\xa7\x0d\x73\x97\x4f\xca\xd2\xba\x58\x10\xba\xc6\x70\x61\x53\x5b\xda\x14\x19\x23\x97\xce\x67\x2e\x25\x5a\x39\xc5\x2a\x8f\xcb\xe3\xc9\x51\xf9\x95\xb8\x30\x64\x9b\x32\x65\x55\x77\xf5\x12\x87\xd3\xca\x07\x3c\x29\xcb\xb1\x8e\x6e\xe9\x4b\xea\x5a\x5d\x77\x75\x79\x79\xf1\xa3\xfe\xe1\xe2\x07\xfd\xfe\xec\x7f\x7a\x8a\xa2\x09\x03\x9a\x8c\x2a\xe7\x60\x8d\x2c\xd0\xe9\x78\x8b\x9a\xdc\x96\xd6\x94\x5b\xab\x1e\x3b\x19\xf2\x68\x35\x8e\x7d\xb2\x3c\xb0\x83\x77\xa6\x92\xd0\x81\xc5\x51\x18\xcd\x22\xa0\x3b\x1d\x30\xab\xfb\x2d\xc5\x6b\x26\x93\xbf\xac\xb3\x1a\xce\xc6\x5b\xbf\x47\x8b\xa7\x7c\xfe\x88\x9d\x4e\x19\xf5\x9f\x8b\x97\x2f\x1f\xeb\xf5\x79\x87\xf1\xaa\xf1\x15\xc3\xdb\x14\xd9\xf8\x88\x04\x17\xc1\x70\x95\xa8\x05\xb9\xf4\xfb\x6c\x33\x96\xe2\xfb\x8f\xd0\x6c\xe1\xb1\x3d\x19\x68\x8d\x50\xd4\x53\x42\xf0\xe6\xf2\x5c\x78\x6d\xd4\x12\xe8\x3b\x27\x5c\x09\x1f\x6e\x6e\xb6\xbc\x98\xff\x91\x7c\xfc\x8c\xe8\xcc\xbe\x85\x19\x6c\x36\x1f\x1f\x48\xc7\xba\xf1\x01\xe1\x19\x0c\x7d\x0b\xdb\x90\xa0\x07\xd0\x9f\xe0\xcb\xfc\x8f\xee\x5f\x81\x4b\x0a\xe0\x60\x5d\x84\x4c\xc3\x93\x55\x6d\x53\x18\x65\x6e\xa6\x00\x72\x40\xec\xe0\xa5\x72\x29\xa2\x3a\xa4\x9b\x84\x6d\x5a\x7d\x99\x6a\x4a\xc9\x36\xa0\x89\x22\x13\x8a\x5a\xd0\x54\xc1\x41\x15\x3d\x34\x5d\xe5\x2b\x78\x06\x11\xd1\x65\x4d\x38\xa6\x26\xe9\x68\x82\xaf\x5f\x97\x0e\x57\x65\xec\x43\x78\x25\x6a\x15\x15\xc0\x11\x10\x2e\x52\x62\xf0\x19\xa4\xb6\x9d\x28\x31\x99\xae\x80\xb5\x31\x35\x46\x06\x97\x30\xc7\x39\x8f\xaa\x95\xe2\xf6\x4a\x16\x1f\x84\x55\x22\x1c\x1d\xc9\xc4\xa4\x6d\xd4\x8f\xca\x97\x61\x81\x21\xad\x61\xed\x43\x80\x88\xc2\x7f\x35\x32\xe0\x35\xda\x9e\x45\xd3\xaa\x51\x31\xef\xc2\xfb\xb6\x45\xe7\x0d\x8b\x37\x09\x0f\xf3\x83\x6d\x96\x6b\x52\xd8\x5e\x2b\x81\x13\xd8\xd4\x76\xa3\x1c\x3f\x36\xd6\xd9\xab\x5d\x3c\xad\xb7\x3f\x62\x5a\xcf\xe1\xec\xbf\xef\x7e\x52\x95\x57\x37\x37\x18\xdd\x66\xb3\xed\x61\x4d\xd8\xdd\xb5\xda\x25\xbb\x44\x9a\x14\xb8\xca\x6c\x16\xb7\x3d\xcc\x43\x66\x6c\x2d\x07\xc8\x9c\x3a\x98\x0c\xf5\x38\xd1\xbe\x2b\xd8\xb7\x48\x9f\xb5\x12\xba\xf1\x16\x9f\xb2\xdb\x3b\x6f\x97\x55\x2e\xae\xab\x0c\xba\x82\x71\x9e\xce\xe7\x65\x69\x7e\xe9\x09\x4b\xc2\x9c\x7a\xb2\xa8\x3b\x43\xfc\x52\x01\xa0\x6d\x12\xcc\x0f\x9b\xc1\x83\x1a\x41\xdc\x43\x4d\xdd\xa7\x3e\xb1\x01\x78\x01\x2f\xe6\xf0\xfa\xf5\x5d\xe9\x92\x46\xea\x23\xdf\xbf\xa9\x00\x64\xe5\x12\xa1\x4d\x11\xf4\xe5\x83\xf3\x9b\x1b\x2d\x83\xc7\x4f\x50\x5c\xa6\x80\xc2\x2e\x15\x19\x81\xac\x02\x98\x1e\x72\x12\x64\xb2\x2e\x9d\xc1\x36\xc5\xe2\xe7\x9c\xe2\xdd\x23\x4e\x01\xcc\x42\xaa\xb5\x23\xbf\x42\x9a\x9d\xc0\xec\xe7\xd4\x53\x34\xc1\xcd\xbe\x95\x33\xe7\xb3\xd0\x9b\x0e\x58\x1b\x3b\x68\xc2\xda\x67\xa6\x61\x76\x02\x4c\x3d\xaa\xe9\xe9\x26\x79\x60\x74\x53\xdc\xfd\x8e\x1b\xe2\x87\x2d\x7f\xdc\xe0\xde\x84\x2b\xaf\xd4\xb6\x7f\x5d\x1f\x82\xd0\xd6\x8e\xaa\xde\xc9\xf3\x2e\x17\xff\x4a\x0e\x61\xb3\xd9\xc7\x21\x7c\xad\xd4\x11\xac\x1b\x8c\x70\x8b\x54\xd9\xf5\x5b\xe4\x99\xe8\x20\x22\xaf\x13\x2d\xa1\x67\x1f\x3c\x7b\xcc\x50\xa7\x91\xa2\x38\x01\x19\x8b\x42\x2f\xce\x0b\xe6\x0a\x75\x24\xed\xdd\x5d\xa6\x7e\x44\xa1\x20\x14\x5c\xcc\x02\xb2\x65\x4c\xeb\x28\x38\x11\xec\x4d\x91\x70\xec\x44\xdf\x4d\xd0\xc7\xb6\xe3\x01\xf2\x48\xb8\x5b\x52\xfe\xf0\x61\x0f\x64\xa0\xdd\x73\x38\x3d\x85\xd9\x0c\x3e\x7e\x14\x9e\xdd\x51\xe3\x2b\x98\xb8\x71\x47\xe4\x87\x7b\x71\x35\x61\xf9\x8e\xab\x7f\x43\xb0\x19\x19\xfe\x74\xad\xf0\xba\x4b\xc4\x70\xf5\xe6\xea\xdf\x97\xef\x4e\xe7\x7b\x5e\xfe\x93\x68\x89\xb4\x75\x32\x9d\xc3\x66\x33\x1f\x2f\xea\xeb\xdd\x1c\x84\xae\xb4\xee\xc8\xaf\x7c\xc0\x1a\x9d\xa0\xbe\x05\xad\x77\x0d\x95\x9a\x40\xaf\xa0\x3c\x29\xe5\xe7\xc9\x2f\xa0\x71\x1b\xed\x60\xca\xb0\x65\x22\xd5\x47\x09\x38\xdd\x50\x6a\x22\x19\x6d\x8d\x66\xea\x33\xab\x43\xdb\xce\x7d\x44\xa7\x8d\x6b\xa1\xa3\x24\xaf\x07\x48\x1d\xc6\x2c\x4f\x19\x2d\x8f\x11\x4a\x41\x77\xc1\x44\x9c\x56\x35\x64\xfc\xdc\x2d\x19\xe6\xfe\x5e\xcb\x5e\x21\x98\x90\xd3\x28\x06\x77\x96\x45\x48\xd6\x84\x62\x95\x42\xdf\x62\x06\xe7\x09\x2c\xa1\x11\x4e\xde\xee\x8a\xc0\x7f\x82\xbe\x95\x0d\x91\x35\x52\xed\x52\x0c\x75\x0b\x2f\x8e\xff\xf2\x02\xf4\x1e\x31\x26\xf2\xb5\x8f\xe5\x13\xfe\x25\x8f\x98\x18\x4f\xc0\x70\x6a\xbd\xd5\xbf\xcd\x18\x2c\xc9\x47\x6b\x48\xa9\xcb\xd0\x47\xf6\x61\xab\xd5\xb2\xac\x7d\xa7\xee\xa0\x37\xbd\x5a\x1e\xf7\x72\x8b\xd5\xfb\x48\x3d\x68\x3d\x81\x6f\xe2\x8b\x51\xb1\xf3\x90\x43\xaa\x21\xfb\x68\x47\x5c\xb4\x26\xca\x77\x99\x68\xd7\xc0\x8d\x98\x70\x43\xa9\xaf\x1b\xd8\x51\xce\x5e\xc0\x2d\xef\xec\xbc\x3c\x9a\x52\xea\x1e\x1c\xff\x1a\x00\x00\xff\xff\x0f\x1e\xdf\xe5\xbb\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
