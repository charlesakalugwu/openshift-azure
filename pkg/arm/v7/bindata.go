// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5f\x73\xdb\x36\x12\x7f\x2e\x3e\xc5\x96\x72\x9b\x3f\x0d\x48\x3b\x6d\x27\x1d\xb5\xca\x8c\xe3\x28\xb9\x5c\xdc\x58\x27\x27\x93\xb9\x49\x33\x19\x88\x58\x52\x88\x40\x80\x05\x40\xd9\xaa\xa3\xef\x7e\xb3\x20\x25\xdb\xb2\x6c\x27\x93\xeb\x4b\xfd\x20\x4b\xc0\x62\x77\xb1\x7f\x7e\xbb\x8b\xde\xb7\xd9\x44\x99\x6c\x22\xfc\x14\x38\x9e\x32\xd6\x83\x67\xd6\x41\x40\x1f\x94\x29\xfb\xa0\x6d\x09\xc2\x48\x90\xce\xd6\x20\xb4\x86\xe0\x44\x51\xa8\x1c\xc2\x54\x04\x38\xb1\x8d\x96\xe0\x6c\x13\x10\xe6\x4a\x40\x98\x22\x54\xc2\x07\x74\x30\x3c\x7c\xc2\x7a\x30\x1e\x1e\x1f\xbd\x19\x1f\x0c\x9f\x8f\x8f\xde\x8c\x06\xc9\xc2\x36\x8e\x3b\xf4\xb6\x71\x39\xf2\xd2\xd9\xa6\x4e\x58\x0f\x8e\x8e\x3f\x3c\xfb\xcf\xd3\x57\x83\xc4\xd6\x68\xfc\x54\x15\x21\xdd\xb9\x74\x32\xb5\x5e\x48\x9c\xa7\xb9\xb6\x8d\x4c\x58\x8f\xf5\x40\xd5\x41\x4c\x34\x7a\xe0\x2f\xe0\xc5\xab\xd1\x9b\xd7\xc0\x3d\xec\xdc\x95\xaa\x84\x1f\xfc\xd4\xba\x00\xc9\x4e\xc7\x37\x81\x4f\x10\x84\xd2\xc0\xf7\xee\x01\xff\x08\x87\x47\xcf\x81\x73\x6d\x4b\x5e\x3b\x2c\xd4\x29\x24\x2f\xdf\x3c\x19\x02\x91\xc2\xd3\xf1\xd1\xa8\x9f\x7c\x1d\x7f\xe2\xc1\xd8\xd9\x19\xa8\x02\xd2\x03\x6b\x0a\x55\xa6\xc7\x98\x37\x4e\x85\xc5\x48\x84\x7c\x3a\x12\xf9\x4c\x94\xe8\x61\xb9\x64\xda\x96\x25\x3a\xe0\xa1\x33\x1c\xf7\x41\xb8\xd0\xd4\xa9\x9f\x42\xa2\x8c\x0f\x42\x6b\x65\x4a\x70\x28\x81\x4c\x9e\x4b\x03\x79\xe4\xd9\x38\x11\x94\x35\x60\x0d\xec\xdc\x9d\x5a\x1f\x8c\xa8\xf0\x5e\xc2\x72\x11\xe0\x71\x36\x17\x2e\xd3\x6a\x92\x2d\x9a\x2a\xcb\xb5\x42\x13\x78\x8e\x2e\xa4\x35\x56\xf0\xdb\x6f\x77\x86\x47\xcf\xee\x90\x8a\x07\xe8\xc2\xbe\x7f\xb2\x08\xe8\xd7\xba\xd2\x9a\x2a\x54\x2e\x02\xfa\xb4\xd3\x75\x8c\xb5\xf5\x2a\x58\xb7\x88\xdb\xf0\x09\x8e\x83\x23\xbd\x96\x4b\x36\x3c\x7a\x76\xbd\xd0\x19\x2e\x36\x65\x8e\x9c\x9a\x8b\x80\x2f\x71\xf1\x85\x92\x5f\xe2\xe2\x8a\xe0\x1e\xbc\x3e\x7a\x7a\xd4\x07\x89\x1a\x03\xc6\x08\x2c\xac\xd6\xf6\x84\x68\x3c\xe6\xd1\x44\xa2\xa0\x90\xa4\xf0\xcd\x75\x43\x56\xf6\x20\x1c\x82\x6b\x0c\x9c\xa8\x30\x05\x01\xf3\x0a\x54\x25\x4a\x6c\x7f\xcf\x54\x3e\x8b\x7e\x48\x1d\xd6\x16\x26\x62\x86\x12\x94\x69\x6f\x09\x19\x86\x9c\xae\x18\x37\x7d\x2a\xb3\x0d\xf2\xd5\x55\xdf\xb9\x29\x6a\xfe\x88\x7b\x74\x73\x74\xdc\xd5\x95\x7f\xcf\xc8\x49\x83\x31\x4a\xf8\x97\x08\x30\x34\x01\x5d\xed\x94\x47\x38\x54\xa6\x39\x85\x47\x70\x1c\x89\xe1\xee\x78\xf4\xbb\xbf\xc7\x26\xc2\x63\xe3\xf4\x60\x1a\x42\xed\xfb\x59\x96\x4b\x93\x3a\x94\x53\x11\xd2\xdc\x56\x59\x6e\x4d\x40\x13\x32\xa9\x7c\xc8\x48\x5a\xd6\xca\xca\x1e\x65\x8f\x5a\x46\xd9\x0e\xb1\x10\x2e\x9f\x66\xd6\xb3\xb2\x2e\x67\xb8\x18\x14\x4a\x63\x3f\xcb\xe2\x3d\xea\x99\xca\x5c\x5d\xf1\xb2\x2e\xb3\xf1\xe8\x77\xfe\x7c\xf4\x9c\xbf\x1c\xfe\x97\xb7\x52\xb8\x43\x8d\xc2\x23\xf3\x5e\xe7\x82\x02\x68\x10\x4f\xb9\xa9\xaf\xb2\x5c\x64\x1d\x55\x83\x35\x39\x39\x52\x45\xb7\xb7\x94\x37\xc4\xe0\x39\x29\x29\x74\x43\xe0\x30\x34\x94\x87\x72\xb0\x40\xcf\x36\x4d\x8a\xa7\xc1\x09\xff\x65\x96\xe5\x30\x8c\xa7\xfe\x0e\x13\xb7\xfa\xfc\x13\x2d\x6d\x3d\xf2\x1f\xd3\xbd\xbd\x6d\xb6\x3e\xaa\xd1\x1c\x13\x6a\xc3\x81\x35\x41\x28\x83\x0e\x46\x5a\x84\xc2\xba\x0a\xe8\xd0\xdf\x13\xcd\x98\x11\xef\x7f\x82\xb1\x09\xc7\x3e\xbb\x10\xec\x8f\x8f\x08\xd7\x62\x35\x81\xa6\x96\x84\x95\xf0\xee\xec\xac\xc3\x45\xff\x6f\xab\xcc\x2d\x65\x27\x79\x00\x09\x2c\x97\xef\xaf\x94\x8e\xc2\x3a\x10\x21\x60\x55\x07\x50\x06\xce\xf6\xd2\xf4\xe7\xe5\xaf\x20\x2d\x03\x58\x34\x15\x74\x6a\x00\x5f\x00\xff\x13\xbe\x4c\x66\x14\x09\xdf\x7f\x0f\x13\x87\x62\xc6\x00\x6e\xbc\xf0\xbb\x95\x1a\x3b\x67\xdd\xb7\xe5\xfb\xed\x57\xef\x74\x6a\x6b\x61\x21\x94\x46\x99\x30\xa0\xda\xfb\xee\xdd\x85\xd3\xc0\x75\x80\x9f\xe1\xfd\xfb\x5f\xa9\x46\x18\xf0\x1a\xb1\x86\xbd\x5f\x01\xb5\x47\xc0\x53\x15\xe8\x47\xa1\x98\xb4\x06\x6f\xf1\x86\xc3\xca\xce\xbf\xac\x28\x93\xf5\x72\x8d\xc2\x50\x15\x62\xae\x02\xee\x0a\xb8\xb1\x48\xdf\x14\x3c\x67\x67\x68\xe4\x72\xc9\x98\x2a\xe0\x5b\x28\x1d\xd6\xe7\xe4\xd2\xe6\x33\x74\x6d\x91\x2a\x7c\x10\x93\xf6\xc2\x0c\xc0\x2f\x7c\xc0\x2a\x0f\x1a\x7c\xb0\x35\xb4\x84\x3c\x6a\xd5\xd4\x69\x50\x15\xba\x5b\xa9\x28\x23\x55\x8e\xd7\xd1\x5d\xd8\xaf\x66\x85\x4f\x4f\x0b\x0f\xbc\x80\x4c\xe2\x9c\xd2\x7a\x96\x89\xbf\x1a\x87\xd9\xba\x05\xac\x85\x0b\x7b\x0c\x00\xf3\xa9\x85\x3b\x37\x93\xc1\x95\x3b\x02\xb1\x87\xd2\xd5\x7f\x36\x36\x08\x80\x5d\xd8\xbd\x03\x8f\x1f\x9f\x5f\x9d\xd4\xb0\x8d\x09\x9b\x27\x19\x80\x43\x1f\xac\xc3\xdc\x1a\xe0\xe3\x2d\xfb\x6d\x43\x43\x9c\xda\xa5\x4c\x0a\xac\xac\x49\x3f\x7a\x6b\xce\x9b\x19\x06\x90\x50\x23\x29\x9d\x9a\xa3\x4b\xfa\x90\x7c\xb4\x8d\x33\x42\xcb\xe4\x01\xed\x49\xe5\x29\xcd\xb9\xc6\x52\xe4\x0b\xee\xb0\x54\x3e\xb8\x45\xd2\x87\xe0\x1a\x64\x6d\x0b\x73\xd9\x96\xc2\x85\xab\xc6\xdc\x4e\xb0\xe1\xbb\x42\x31\xd6\x59\xa6\x6e\xb4\xa6\xfc\x5c\xe5\xe4\x0b\xea\x6d\x7c\xfa\xca\x4a\x8c\x59\xf8\x38\x9a\xda\x10\xd5\xf7\x5b\xa3\x08\x43\x2e\xb7\xc5\xd0\xda\xab\x9b\xbe\xf2\xb9\x57\x7b\x99\x6e\xcc\x2e\x7c\xfa\xd4\xde\xee\x3a\xb7\x5e\x20\xdd\x10\xd8\x3a\x54\x62\x21\x1a\x1d\xfc\x67\x39\x94\xce\x5d\xef\xce\xb8\x4b\x76\x21\x64\x93\x3e\xa2\x5a\xc8\xeb\x07\xbf\xfc\xf4\xd3\x4f\x11\xd7\xbe\xa9\x9d\x0d\x76\xb0\x73\x26\x7d\xf8\xee\xbb\x07\xf7\x97\xec\x9b\xda\xba\xd0\x2e\xf4\x7a\xf7\x1f\x2c\xd9\x37\xe7\xa3\xc0\x7e\x1c\x55\x5e\x8c\x87\x6f\xf7\x0f\x0f\x3f\xec\x1f\x1e\x1e\xbd\x05\x5e\xc3\x4e\x64\x02\xbc\x22\xef\x04\x04\xce\xdb\xff\xaf\x86\x6f\x69\x71\xb5\xcd\x25\xb1\x86\x9d\xf8\xc9\x3f\xc2\xfe\xc1\xc1\x70\xf4\x1a\xf8\x49\x87\x39\x2b\x39\xdc\x8b\x39\x76\xc1\xe7\x17\xbe\x05\x96\x6c\xb5\x4b\x23\xda\x49\x44\x30\x8a\x04\x42\x21\x43\x5e\x3d\x11\xa2\x44\x13\xe2\xb0\x66\x30\x9c\x58\x37\x83\x26\x28\xad\x82\x42\x0f\xa5\x8d\x48\x19\x2c\x38\x91\x23\x61\x95\x54\x84\x53\x29\x4d\x3a\xc5\xfa\xb0\x6b\x8c\x87\x09\x16\xd6\x21\x48\xe3\x41\x79\x98\x19\x7b\x62\x20\xd8\xd8\x59\xb7\x92\x10\xd0\x48\x68\xea\xb6\x57\x26\x74\x5d\x80\x8f\x85\x80\x9d\x4c\x95\xc6\x08\xbc\x6b\xf0\x03\x2e\xef\xc1\x60\x00\x49\x12\xc1\x57\xda\x73\xe8\x6d\xaf\xdd\x9e\xf9\x16\x6e\x0e\xdd\xe3\x16\x7f\x61\xb9\xaa\x47\x1d\x97\xd6\x76\x1e\x03\xfc\x70\xca\xf0\x34\xda\xf6\x78\xff\xf8\xcd\xf8\xc5\xe0\xce\x05\x2e\xbf\x47\x14\xef\x98\xb4\xfb\xb0\x5c\xde\x89\x07\xf9\xe9\x2a\x6d\x68\x20\xe0\xbc\x76\x6a\xae\x34\x96\x28\x81\x73\x82\x6a\xbe\x32\x28\xdd\x09\xf8\x1c\xb2\x7e\x46\x5f\xfb\x7f\x01\xc7\x4e\xda\x8d\x2a\x43\x57\x3d\x58\x63\x48\x60\x7b\x82\xb1\xb6\x84\xf1\x5c\xf0\xe0\x1a\x1f\xc8\xb3\x23\x65\x60\xd6\x4c\xb0\x75\xba\x27\xc3\x37\x1e\x41\xdb\x5c\x68\x10\xb5\xea\xfa\x31\xe6\x49\x39\x05\xdc\x21\x24\xbe\x77\x17\xee\xb7\xeb\x7d\xb8\x97\xde\xef\xfd\xb1\xb7\xea\xb0\x2e\xd4\xa0\x5e\xd2\xe6\xb3\x75\xaa\x54\x26\x6b\xcb\x5a\xb6\x9e\xb8\x79\xbb\x90\x9e\x0b\xff\x7a\x19\x14\x2e\xf1\xe3\xff\xcf\xd5\x4b\xf3\xf5\x4c\x9d\xb5\x21\x8b\x6c\xb2\x8e\x0f\x3b\x3b\xe3\x94\x10\x06\x61\x27\x7d\x22\xf2\x59\x53\x3f\xd1\x76\xf2\x8a\xe2\x38\x49\x6e\x9d\xd7\xd7\x29\x49\x48\x34\x47\xb7\xb8\xd2\x07\xb0\x1e\xf8\x40\x71\x0b\x25\x86\x98\x53\x93\x28\x25\xb6\x04\xe3\xe2\x32\x72\x65\xf7\x19\x35\x2f\xa4\xc7\x53\xe5\x06\x97\xf7\xba\x73\xd5\x4c\x2a\x07\x3b\x17\xe8\x6e\x69\x5e\xa4\x3d\x31\xda\x0a\x49\x6a\xb6\x3c\x92\xcf\x4c\xc1\x61\xc8\x65\x6b\x93\x6b\xb2\xf0\x52\x16\x5d\x4d\x9c\x3f\x18\xc4\xe4\xb9\x12\x85\xfd\xab\x4b\xdb\x88\xe3\xeb\x4f\xed\xec\x5c\x49\x74\x59\x3f\xfb\x20\x45\x10\xd9\x07\xdb\xac\x59\x5f\x34\x43\x3f\xb3\x0d\x65\x28\x6d\xdd\x72\x17\x20\x83\xb6\xb6\x68\x39\xf1\x49\xe7\xf4\x01\x9d\xdc\x88\x83\xe5\xb2\x23\x92\xf1\x91\x2c\xf6\x7b\x03\x12\xd6\xb9\x24\x95\x93\x8e\x40\xc4\xd7\x87\xc1\xca\xe2\x37\xfb\xa5\x93\xbf\x22\xa6\x2e\x76\x15\x2c\x0f\x57\xe5\xed\xb6\xb6\x94\x88\xe2\xbb\x87\x11\xb5\x9f\xda\xf0\xb9\x9e\x6d\xd1\x91\x6c\xf2\xf5\x9e\x25\x5b\xf6\xd7\xdf\xd6\x5b\x17\x63\xb7\x7f\xf9\x57\xeb\x23\x8e\x30\x7c\x7d\xf0\xf4\xe0\xf5\xe1\x87\xfd\xd1\x8b\x41\xf2\x63\x72\x8d\xeb\x2e\x29\x1b\x69\x88\x4b\xec\x8d\xba\x6b\xaf\xcc\x75\x29\x1e\xae\x78\x87\xa2\x87\x53\xf2\x5c\xce\x2b\x83\x27\x1d\x41\xac\x5e\x17\xb2\xb7\x5b\x56\x46\x05\x25\x34\xef\x9e\x92\x20\xe9\x5c\xb1\x1b\xff\xd6\xc3\xed\xa5\xd5\xfe\xc3\x1f\x7f\xd9\x7d\x70\x71\x69\x6f\x2b\xe1\xde\x55\xc2\x87\x5b\x09\x1f\x46\xc2\x64\xbb\x4a\x3c\xd8\x19\x9a\x68\x16\x5e\x58\xc7\x63\xdb\xb5\x41\x2a\xe4\x1c\x5d\x50\x1e\x79\x8d\xe8\x78\xe3\xb4\x87\x2d\x30\x19\xc5\x30\x56\xcd\xaf\x5a\x29\xbb\xbf\xb1\x76\x65\xac\x59\xdb\xf3\x12\x3c\x5d\x6a\xd5\x36\xf8\x7e\x4e\x80\x63\xec\x1b\x92\x08\xd5\xd4\x88\xd0\x1c\x14\x1a\x83\x92\x0b\x59\x41\xed\x6c\x41\x21\x7f\x5e\xd8\x72\x6b\x82\xb3\x9a\xd7\x5a\x50\xbb\xd1\xa3\x06\x46\x68\x6f\xc1\x20\xca\x73\xba\x34\xd6\xd8\x74\x6e\x75\x53\xa1\x07\x0a\x8c\xdc\xa1\x08\x28\x57\x1d\x11\x35\xa7\xed\xa4\x91\x53\x1f\x44\xcd\x52\x07\xbf\xbc\x82\xdd\x47\x3f\xef\x52\x2f\xb8\xbe\x4e\x07\x5a\xd7\xf0\x27\x3d\xda\xe1\x20\x96\x0b\xbf\xf0\xda\x96\xe0\x95\xc9\x63\x83\x55\x09\x23\x4a\x04\xa4\x1a\x12\xa6\x44\x12\xa6\xce\x36\xe5\x14\x56\xf3\x05\x3b\x1f\x09\xba\x21\x63\xc5\x65\x3d\x36\x6c\x4c\x68\x9b\xdb\xac\x07\xc6\x06\xec\x83\x08\xb6\x52\x39\x3f\xb7\x58\x6c\xf3\x72\x27\xfc\x14\xb4\xb5\xb5\x87\xc6\x04\xa5\x57\x2f\xfb\xca\x43\x53\x5f\x60\xde\xbe\x64\x6c\xe7\xb2\x16\xf6\x99\xaf\xe1\x7e\xda\x04\x42\x40\x42\x19\x9c\x58\x1b\xc0\xd8\x93\xf5\xb8\xbb\x39\x05\xdd\x28\x92\x06\x1b\xf6\xbf\x00\x00\x00\xff\xff\xfe\xa9\x77\x4f\xdf\x18\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdf\x6f\x1c\xb7\x11\x7e\xe7\x5f\xf1\xf9\x6c\x58\x31\x1a\xee\xda\x28\x0c\x01\x72\x64\xc0\x75\x95\x34\x75\x53\x09\x52\x8b\xa2\x10\xf4\xc0\x5b\xce\xee\x32\xc7\x25\xd7\xc3\xd9\x93\x2e\xd7\xfb\xdf\x0b\xee\xde\x49\x8a\x64\x9f\xe3\x87\xbc\xe4\xed\xf6\xf8\xcd\xef\xf9\x66\xc8\xa7\x4f\xca\xb9\x0b\xe5\xdc\xa4\x16\x9a\x6e\x94\x5a\xaf\xe1\x6a\x14\xef\x63\xa8\x5d\x53\x5c\x50\x35\xb0\x93\xd5\x99\x91\xaa\x3d\x33\xd5\xc2\x34\x94\xb0\xd9\x28\x1f\x9b\x86\x18\x5a\x10\xa2\x25\x9d\xc4\xb0\x0c\x7d\x91\x5a\xcc\x5c\x48\x62\xbc\x77\xa1\x01\x93\x45\x6b\x04\x95\x0d\xa8\x46\x8d\x03\x1b\x71\x31\x20\x06\x3c\xfb\xa6\x8d\x49\x82\xe9\xe8\xc5\x4c\x55\x46\xf0\xb6\x5c\x1a\x2e\xbd\x9b\x97\xab\xa1\x2b\x2b\xef\x28\x88\xae\x88\xa5\xe8\xa9\xc3\x77\xdf\x1d\x9c\x9c\x7e\x7f\x90\x1d\x7c\x4f\x2c\xef\xd2\x5f\x56\x42\xe9\xd6\xd3\xfc\x9f\xab\x5d\x65\x84\x52\xb1\xf5\xf4\x9c\xfa\x98\x9c\x44\x5e\x8d\xc7\xf8\x1f\x2e\x84\xb3\x5f\x9b\x8d\x3a\x39\xfd\xfe\xf3\x46\x17\xb4\x7a\x68\xf3\x8c\xdd\xd2\x08\x7d\xa0\xd5\x57\x5a\xfe\x40\xab\x47\x86\x9f\xe2\x5f\xa7\x7f\x3d\x3d\x82\x25\x4f\x42\x90\x96\x50\x47\xef\xe3\x75\xc6\x24\xaa\xc6\x14\x99\x5a\x88\x61\xbc\x47\xe5\x87\x24\xc4\x09\x86\x09\x3c\x04\x5c\x3b\x69\x61\xb0\xec\xe0\x3a\xd3\xd0\xf4\xbd\x70\xd5\x62\xac\x43\xc1\xd4\x47\xcc\xcd\x82\x2c\x5c\x98\xa2\x44\x49\x52\xe5\x10\xc7\xc3\x54\xd8\xf2\x01\x7c\x17\xea\x25\xb7\xe4\xf5\xa1\x4e\xc4\x4b\x62\xcd\x7d\x97\xae\x54\x2e\xd2\xf1\x39\x59\xfc\xcd\x08\x4e\x82\x10\xf7\xec\x12\xe1\x1f\x2e\x0c\x37\x38\xc4\xc5\x08\xc6\x37\xe7\x67\x3f\xa5\x17\x6a\x6e\x12\x0d\xec\x8f\x5b\x91\x3e\x1d\x95\x65\x65\x43\xc1\x64\x5b\x23\x45\x15\xbb\xb2\x8a\x41\x28\x48\x69\x5d\x92\x32\x5b\x2b\x27\x5b\xe5\x61\x79\x38\x29\x2a\x9f\x65\x15\x86\xab\xb6\x8c\x49\x35\x7d\xb3\xa0\xd5\x71\xed\x3c\x1d\x95\xe5\x18\x47\xbf\x70\x25\xf7\x9d\x6e\xfa\xa6\x3c\x3f\xfb\x49\xff\x70\xf6\x83\xfe\x70\xf2\x5f\x3d\x59\xd1\x4c\x9e\x4c\x22\x95\x92\xaf\x4c\x6e\xa0\xe3\x51\x8a\xdb\xd4\x95\x95\x29\xb7\xa8\x81\xfa\x5c\xe4\x11\x35\x96\x7d\x42\xee\xe9\xc1\x3b\x68\x76\x68\x4f\xe3\x28\x0a\x66\xee\xc9\x1e\xaf\x28\xa9\x87\x29\xa5\x1b\x61\x93\xbe\x2e\xb3\x1a\x27\xa3\xd4\xef\x91\xe2\xc9\x9f\x3f\x62\xa6\x63\x22\xfd\xe7\xe2\xd5\xab\x4f\xe5\xfa\xb4\xa7\x70\xd1\xba\x5a\xf0\x3e\x06\x31\x2e\x10\xe3\xcc\x1b\xa9\x23\x77\xc8\x42\xbf\x4f\x37\x53\x99\x75\xff\x11\x92\x9d\xe7\xd8\x6f\x5c\x03\xef\xce\x4f\xf3\x54\x1b\x37\x09\x86\xde\xe6\x49\x89\xcb\xf5\x7a\x3b\x15\xd3\xdf\xa3\x0b\x5f\x58\x39\xb3\x6f\x31\xc3\x66\x73\xf5\x68\x71\xd4\x91\x61\x44\xa8\xeb\x05\x2e\x60\xfd\xaa\x28\x5e\x6f\xde\xc0\x46\x05\xac\x86\x0e\x5b\x37\xa0\x57\xd0\x1f\xf1\x75\x36\x47\x93\x78\xfe\x1c\x73\x26\xb3\x50\xc0\x9e\x70\x2f\x77\x4e\x3c\x5b\x6f\x7f\x6d\xae\x3e\x1d\xf8\xd6\xa3\x69\x0f\xd6\xc6\x79\xb2\x33\x85\xbc\x75\x2f\x2f\xef\x49\x43\x7b\xc1\x6b\x5c\x5d\xbd\xc9\xfb\x21\x20\x79\xa2\x1e\xaf\xde\x80\x7c\x22\xd0\x8d\x93\xfc\x51\x3b\x65\x63\xa0\xbd\x95\x60\xea\xe2\xf2\xeb\xd6\x71\xce\x5c\xe5\xc9\x84\xbc\x7f\x14\x77\xd0\x5c\x63\xef\x7a\xde\xd7\x36\xeb\x35\x05\xbb\xd9\x28\xe5\x6a\x3c\x41\xc3\xd4\xdf\xc1\x6d\xac\x16\xc4\xd3\x7a\xaa\x93\x98\xf9\x14\xae\x02\xd2\x2a\x09\x75\x95\x78\x24\x89\x3d\x26\xa0\x1e\xbd\x1a\xfa\x42\x5c\x47\xfc\x45\x54\xe6\xa2\xab\xe8\x73\xb8\x7b\xe7\xdd\xa2\x4e\xc5\x4d\x9d\xa0\x6b\x94\x96\x96\x99\xd0\x8b\xd2\xfc\x32\x30\x95\x4c\x29\x0e\x5c\x91\xee\x0d\xcb\x2b\x05\x50\xd5\x46\x1c\xec\x87\xe1\x51\x8c\xc8\xea\xd1\x70\xff\x71\x88\x62\x80\x97\x78\x79\x80\xb7\x6f\xef\x42\xcf\x6e\xc4\x21\xc8\x43\x49\x05\x30\x25\x89\x4c\x55\x0c\xd0\xe7\x8f\xce\xd7\x6b\x9d\xfb\x87\x3e\xa2\x38\x8f\x9e\x32\xf9\x6a\x36\xb9\x7b\x15\x30\xdd\x72\xb2\x91\x09\x5d\x5a\x43\x5d\x0c\xc5\xcf\x29\x86\xbb\x1b\x8e\x02\x66\x3e\x36\xda\xb2\x5b\x12\xcf\x8e\x30\xfb\x39\x0e\x1c\x8c\xb7\xb3\x6f\xf3\x99\x75\x29\x73\x5f\x7b\x6a\x4c\xb5\xd2\x4c\x8d\x4b\xc2\xab\xd9\x11\x84\x07\x52\xd3\xbd\x26\xfb\x41\xc1\x4e\x76\xef\x67\xdc\xb0\x3c\x4e\xf9\xa7\x01\x0f\x2a\x5c\x3b\xa5\xb6\xf9\xeb\x07\xef\x33\x83\x77\xac\xfd\x31\xdf\x7d\x52\xf1\xcf\x68\x69\xe4\xe9\xdb\xb1\x20\x21\xa3\x9e\x2b\xf5\x14\xd7\x23\x6d\xb2\xea\xdc\xfc\x99\x16\xb8\x36\xa6\xa1\x20\x30\xc1\x22\x90\x5c\x47\x5e\x60\x10\xe7\x9d\x38\x4a\x68\xe2\x48\x4f\x89\x60\x53\x51\xa6\x88\x75\x99\x1e\x85\x7a\x9a\xd3\xbb\x13\xe6\x21\x24\xcc\xa9\x8e\x4c\xb0\x21\xc1\x25\x2c\x42\xbc\x0e\x90\x38\x5e\xe5\x26\x4b\x34\x66\x62\xe8\xa7\xcb\x59\xa6\xf4\x0a\x69\x9c\x3d\xea\xba\x75\x9e\x46\xb6\xdf\x72\x0e\xda\xbe\xc0\xf1\x31\x66\xb3\x91\xf1\x36\xde\xf1\x7d\xe2\xf7\x24\xf3\x04\xfb\x73\x71\x31\xd1\x1e\x9b\xdd\x08\xdc\x6a\x99\x86\x44\x22\xc1\x9f\x6e\x14\xdd\xf4\x91\x05\x17\xef\x2e\xfe\x7d\xfe\xe3\xf1\xc1\x3d\x2d\xff\x89\xbc\x20\xde\x2a\x99\xce\xb1\xd9\x1c\x8c\x82\xfa\x66\x57\x87\x7c\x03\xd5\xba\x67\xb7\x74\x9e\x1a\xb2\xd0\x3a\x4f\x08\xbd\x4b\x68\x8e\x09\x7a\x89\xf2\xa8\xcc\x3f\x8f\x7e\x81\xa6\xad\xb5\xbd\x2e\x63\x3b\xb4\xd4\x10\xb2\xc1\x49\x42\xa9\x69\x6e\xea\xca\x68\xe1\x21\x89\xda\xd7\xed\x32\x04\xb2\xda\xd8\x0e\x3d\xc7\xbc\x5a\x11\x7b\x0a\x29\xef\x79\x9d\x37\x35\x47\xaf\x7b\x6f\x02\x4d\xad\x9a\x27\xe9\x17\xa4\x72\x31\xef\xf7\x75\xee\x2b\x82\xf1\x29\x22\x10\xd9\x3b\x64\xe1\x63\x65\x7c\xb1\x8c\x7e\xe8\x28\xc1\x3a\x46\xc5\x64\x84\xec\xae\x57\x32\xfd\x27\xea\x57\xb9\x43\x72\x1b\xa9\x6e\x91\x81\xba\xc3\xcb\xc3\xd7\x2f\xa1\xef\x0d\xc6\xc8\xae\x71\xa1\xfc\x8c\xfe\xec\xc7\x44\xc9\x71\xb0\xa7\x55\xf2\xb1\x41\x72\xa1\x1a\x5b\xaf\x33\x21\xbf\x0b\x68\x49\xbc\x92\x36\x43\xa4\xe5\x38\x34\x2d\x76\xac\x56\x77\xec\xdb\x52\x7b\xa7\xe5\x96\xa1\x0f\x46\xe6\xc3\x63\xf5\x14\x21\x0a\x1d\xc1\x48\xec\x5c\xa5\x7f\x9d\x33\x54\x9c\xdf\x94\x3e\xc6\x3e\x61\x08\xe2\x3c\x3a\x93\x5f\x31\x99\x2e\x43\x7f\x4f\xf9\x74\xa9\xf8\xb4\x96\x5b\x63\xbf\xf1\x59\x9a\xda\x41\x6c\xa6\xa2\xd6\x4c\xf3\x18\xf3\x36\xbc\xbe\xdd\x3f\x0f\x07\xce\x5e\x93\x79\x86\xfc\x3f\x00\x00\xff\xff\x66\x71\x4e\xa4\x1e\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
